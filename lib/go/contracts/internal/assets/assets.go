// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/CoinToss.cdc (3.532kB)
// ../../../contracts/PseudoRandomGenerator.cdc (2.839kB)
// ../../../contracts/RandomBeaconHistory.cdc (6.915kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cointossCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x57\xdd\x6e\xdb\x38\x13\xbd\xf7\x53\x4c\x7d\x51\x58\x1f\x62\xd9\xf9\x50\x14\x0b\x23\x5e\x74\x93\x6c\xd2\x00\x0b\x6c\x90\xb6\x7b\x2d\x4a\x1a\xc9\xdc\x48\xa4\x96\x1c\xd9\x09\x8a\xbe\xfb\x82\x22\x25\x51\x3f\x49\xb0\xcd\x85\x63\x53\xc3\x19\xf2\xcc\x39\x33\x23\x5e\x56\x52\x11\x2c\x6f\x6a\x91\xf3\xb8\xc0\xaf\xf2\x11\xc5\x72\xd1\x2d\x17\xf2\xe4\x96\xba\xb5\x07\x26\x52\x59\x5e\x22\x4b\xa4\xf8\xcc\x35\x49\xf5\xdc\x6f\xb8\xd7\x58\xa7\xd2\x9a\xdc\xa2\x40\xc5\x48\xaa\xe5\x62\xc1\x92\x04\xb5\x5e\xb1\xa2\x08\x20\x91\x82\x14\x4b\x08\xae\x24\x17\x5f\xa5\xd6\xf0\x7d\xb1\x00\x00\x70\x46\x1a\x8b\x2c\x80\x02\x09\x14\x6a\x54\x47\xdc\xc1\xa7\xee\x20\xe1\x5f\xac\x2e\x68\x60\xdf\x38\x35\xe6\x0f\x98\x20\xaf\xe8\x0b\x49\xc5\x72\xbc\x67\x74\xd8\x81\xf7\x63\xba\x09\x8f\x28\xfa\x63\x5c\x22\xad\x62\xa4\xdf\x4a\x59\x0b\xda\xc1\xb7\x1b\xfe\xf4\xf1\xc3\x19\x24\xb2\x2c\x39\x5d\x16\x32\x79\xdc\xc1\xb7\x3b\x41\x66\x51\xd9\x50\x77\xd7\xed\x52\xf0\x86\xf3\x07\x3c\x22\x2b\xe6\xfc\x9f\xb8\x10\x5c\xe4\x3f\x1b\x76\x12\x57\xa1\x96\xb5\x4a\xb0\x85\x03\xbe\x37\x26\x73\x80\x4d\x4e\xf3\xa2\xe5\xcc\x69\x16\x9d\x31\x17\x7c\x06\xb9\xc0\x0b\x6c\xfe\x4c\x5a\xc3\xce\x0a\xf6\x7d\xf4\xa9\x99\x17\x0e\xf6\x90\x23\x5d\xd5\x4a\xa1\xb0\x2b\xab\x20\x3c\x20\xcf\x0f\xfd\xbe\x1f\x0b\xfb\xd9\xfc\xdb\x6c\xe0\xfe\xe1\x16\x78\x59\x15\x58\xa2\x20\x46\x5c\x0a\xe0\x1a\x84\x24\xa8\x94\x3c\xf2\x14\x53\x88\x9f\x81\x0e\x08\x37\x7f\xdc\xdd\x9f\xc1\x09\x81\x69\x5d\x97\x08\x74\xe0\xba\x23\x68\xeb\xce\x92\x5b\x03\x03\x5d\x73\x62\x71\x81\x33\x11\xa6\x89\xc8\x6a\xe1\x70\x6b\x49\x60\x40\x32\x64\xf6\xc5\x66\x09\x1d\xec\xe0\xd3\x34\x5f\x56\x03\x76\xf5\x62\x0d\x89\x42\x46\x5d\x5e\x57\x03\xd8\xcc\x9f\x97\x82\x18\x29\x8c\x59\xc1\x44\x82\x03\xb3\xa0\xfb\xb5\xd9\xb8\xc3\x35\x38\xc4\x48\xfe\x93\xa8\xc9\x82\x93\x5f\x64\xc0\x63\x10\xcd\x9d\x3b\x82\x8c\x63\x91\x42\x8a\x19\x17\x98\x82\x14\x8d\x3b\x56\x55\x43\x14\x9d\x5f\x60\x22\x05\x85\x95\xf1\x2c\x1a\x44\x2b\x29\x0b\x90\x99\x01\x2b\xd5\x8b\x01\x09\x5c\xf8\x30\xc5\x4a\x6a\x4e\xab\x4c\xc9\x72\x07\x17\xeb\x18\xa9\xbf\x46\xf7\x05\xcd\x55\x5e\x90\xb2\xc3\xb0\x67\xdf\x48\x5e\xed\x73\x6f\x71\xa0\xb5\xf6\x79\x5d\xf3\x74\x26\xb4\x42\xaa\x95\x30\x19\x72\x86\x3e\x1d\xc7\x8c\x50\x4d\x21\xe8\x18\xe1\x76\xf4\xe9\x0f\xe6\x09\xe2\xb1\xa2\x52\x38\x92\xd6\xcc\xf9\xe1\xe2\x65\xdd\xec\x60\x79\xc5\x84\x91\x83\x3d\x0c\xc4\x98\x49\x85\x2d\x1f\x62\x63\xbc\xf4\xc4\x35\xe0\xa3\xaf\xe0\x09\xae\x03\xcb\xa1\x88\x67\xce\x38\xc7\xf3\xbb\x6b\xcf\xd6\xe0\x3d\x72\xc9\x05\xec\x1d\x3d\x9a\x26\x63\x80\x5c\x31\xeb\xef\xb3\xbb\xdd\x6c\x3a\x35\x2b\x68\x9c\xc9\xce\x77\x8a\x9a\x94\x7c\xee\xf2\xd7\x97\xb6\xcc\xc5\xdc\xc3\xf9\x08\xf4\x01\xe1\xa6\xe5\xdd\xe3\xda\xa8\xc2\x6f\xc3\xed\x88\x7f\x6f\xf0\xee\xee\x3a\x18\xa5\xbb\xe5\x5b\xdf\x16\x6d\x6d\xf8\xbd\xac\xe8\xb9\xe1\xcb\x2a\x18\x55\xc7\x01\x63\x2d\xe0\x27\xa6\x52\xe3\x65\xa0\xb6\x13\xa7\x43\xaa\xd8\x69\xc5\xc6\x17\x81\xff\xc1\xff\xc3\xed\x5b\xd2\xfb\x2f\x48\xd8\x23\xb4\x85\xea\xe7\x41\x99\x55\xa2\x71\xfd\xaa\x10\x5f\xe4\x4f\xdb\x6d\x2d\x65\x5c\xa3\xb5\x5f\x7e\xf1\x48\xb0\xd9\xc0\x3f\x35\x2a\xdb\x48\xec\xc8\x03\x76\x2c\x82\x83\x9d\x8b\x20\x91\x0a\xd7\x6d\x21\x0c\xfd\x9d\x3c\x83\x28\xee\x83\x36\x35\xd6\xf8\x49\xac\x60\xad\x08\xc1\xea\xf5\x0c\x22\xdb\xd2\xff\xcc\x6c\x18\x81\x5a\x47\x80\x4a\x49\xa5\xc3\x41\x52\xa7\x76\xb0\x87\x99\x89\x2d\x9c\x1a\x8e\x51\x18\xfc\xec\xb1\x66\x5a\xa3\xa2\xd5\x74\x7f\xe8\x5d\xc7\xe8\x65\xb0\xff\x0c\x4a\xd4\x9a\xe5\xb8\x6b\x07\xc8\x2f\x76\x48\xf1\xef\x09\x25\xd7\x25\xa3\xe4\xb0\xf4\xa4\x69\xb0\x12\x9a\x98\x20\x6e\x9a\x1f\x6b\x5a\xaf\x8c\xff\xc6\x84\xa0\xd6\x5c\xe4\x80\x4f\x84\x4a\xb0\x02\x22\x2b\x82\xfb\x87\xdb\x08\xe8\xc0\x08\x88\x3d\x62\xd3\xba\x34\x62\x1a\x81\xef\xd3\x34\xa2\xc8\x24\x38\x72\x3d\xc9\x10\xa7\x69\x48\xcd\x04\xbb\xb6\xec\x58\xe7\xed\x0c\xeb\x42\x0e\xd1\xae\x54\x6e\xb8\x36\x3b\xf4\x86\xdd\x61\xa6\x8d\x7a\x0a\xde\x6e\x66\x2d\x3c\xb2\xa2\xc6\xb3\xe9\xee\x86\x96\xe6\x73\xd4\xda\xfd\xfb\xa5\xa8\xf8\xd1\xc0\xf5\xf1\xc3\x3a\xe6\xe4\xd8\xee\x10\x33\x44\x73\x10\x46\x95\xca\xa3\x61\x5d\x30\x78\xec\xcd\xdd\x42\x81\x4f\x64\xe9\xef\x95\x93\xb6\x56\x56\x2a\x7f\x51\x80\x8d\x54\x56\x8d\xa7\xf7\x70\x1e\xf8\x32\x6c\x86\x45\x7f\x36\xf4\xab\x8f\x41\x73\xf5\x5a\x51\x03\xa6\xdf\x4d\xde\x06\x82\xa1\x04\x10\x53\xdb\x32\x5d\xa3\x60\x49\x62\xca\x4d\x18\x4b\xa5\xe4\xe9\xe2\xfd\x68\xf7\xaf\x6e\xb0\xd8\x68\xfb\xaa\xb0\xc9\xda\xe7\xd6\xf9\xbb\xd7\xa7\x92\x41\x0e\xda\x11\xa5\x3b\xc3\xb4\x9c\x9e\x6f\xb7\x5b\xbf\x8a\xda\x6f\xc3\x18\xd3\x17\x19\xd8\xf7\xe7\xeb\x2b\xad\x3f\x6c\xfc\x58\xfc\x1b\x00\x00\xff\xff\x54\xad\xd2\x22\xcc\x0d\x00\x00"

func cointossCdcBytes() ([]byte, error) {
	return bindataRead(
		_cointossCdc,
		"CoinToss.cdc",
	)
}

func cointossCdc() (*asset, error) {
	bytes, err := cointossCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "CoinToss.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5d, 0x79, 0x91, 0xf4, 0x7d, 0xee, 0x68, 0xe6, 0xe5, 0x70, 0x7f, 0x3c, 0xa9, 0x75, 0xa9, 0x32, 0x76, 0x3c, 0x17, 0xf3, 0x97, 0xd9, 0xb8, 0xbd, 0x99, 0xe2, 0x9a, 0xe7, 0xa, 0xf8, 0x22, 0xd4}}
	return a, nil
}

var _pseudorandomgeneratorCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5d\x6b\xe3\x46\x14\x7d\xf7\xaf\x38\x0d\x14\x24\x92\x3a\xfe\x48\x53\x63\xac\xa5\x50\x4a\xba\x2f\x5d\x93\x6c\xd9\xc2\xb2\x5b\x46\xd2\xb5\x3d\x30\x9e\x31\xa3\x2b\x67\xdd\x6d\xfe\x7b\x99\xd1\xd8\x92\x22\x39\xa5\x90\xf5\x8b\x67\x34\x67\xee\xf7\x3d\x77\x44\x96\x51\x51\x44\x42\xa9\x18\x99\xd1\x6c\x45\xc6\x58\x16\x54\xe6\xe6\x5e\xe8\xdc\x6c\xef\x48\x93\x15\x6c\x2c\xbe\x0e\x06\x00\xd0\xbc\xa1\x88\xf1\xc0\xc6\x8a\x35\x2d\x05\x6f\xe6\xcd\x4d\x2f\x78\x59\xa6\x4a\x66\x15\xb6\x5e\x77\x05\xd3\x9e\x34\xe3\x77\xfa\xc2\x7f\xbc\xd5\x7c\x7b\x13\xc9\x7c\x8e\x6a\x79\x85\xbd\x50\x25\x1d\xb7\x71\x75\xf9\xfa\xfa\x1a\x1f\x36\x52\x11\xb4\x61\x28\xb9\x95\x4c\x39\xd8\x60\x3c\x99\x21\x95\x5c\xc0\xac\x50\xb0\x60\xba\x02\x6f\x64\x81\xe5\xfd\x1d\x64\x01\x25\xec\x9a\xd4\x01\x52\xaf\x8c\xdd\x52\x8e\xf4\x80\x3f\xdf\xdd\x3f\x6c\xe4\x8a\xc7\x93\xd9\xe5\x51\x78\xc7\x42\x4b\x85\x29\x6d\x46\x5e\xd0\x57\x7f\xdc\xe7\x70\x05\x7a\xb7\xaa\x82\xa9\xa9\x28\xe6\xf8\xe8\x2c\x9f\x7d\x3a\x7f\x47\x28\x9e\xe3\x83\xb1\xf9\xed\xcd\x09\x74\x5a\x38\x4f\xdf\x6f\xa8\x72\xa6\x40\x4a\xca\x3c\x42\x58\x72\x0e\xf2\x61\x47\xe1\xa2\xf3\x7d\x67\xab\x38\x9a\x3d\xd9\x95\x32\x8f\xd7\xa5\xce\xab\x55\x43\x5a\xaf\x19\x7b\x61\x2b\x05\xa3\x8e\x21\xbd\xb0\xf1\x79\x7b\xa5\x96\x1c\xbd\x10\x86\xab\xe0\x6f\x48\x67\x23\x96\xee\xb7\xb3\xf4\xec\x8b\xfb\x75\xc5\x0d\x15\xe9\x35\x6f\x90\x24\x98\x4e\xe6\xb8\xf8\xf5\xcb\x8e\x32\x96\x7a\x8d\xe9\x04\xe9\x81\xa9\xb8\x68\x49\x79\x6a\xed\x0a\x52\xab\x61\x57\x28\x92\x1e\x4d\x3d\x17\x85\x62\x24\x21\x00\x91\xdb\x85\xa2\xac\x83\x8c\x5f\x8c\xde\x93\x65\xb0\xcb\x1c\xf9\x3a\x73\xd9\x63\x03\x7e\x34\xc7\x94\xf9\xc2\x2e\xb0\x32\x21\xaa\x3e\x76\x52\x28\xf9\xb7\x60\x69\x74\x4b\xa6\x2f\x14\x5a\x6f\x49\xf3\x08\x49\x7f\xcb\x0e\xbd\x92\xf7\x26\x58\xe6\x77\xf3\x1e\x97\xae\x9c\x3a\xcb\x73\x8c\xe2\x73\x3a\xc6\xaf\xa6\x63\x76\x56\xc7\xe4\xd5\x74\x8c\x6f\xcf\x2a\x99\xbe\x9a\x92\xc9\xcd\xb3\x34\x57\xc5\xe0\xbb\xc6\x55\xce\x31\x39\x9f\x4f\x31\x3c\x83\x1e\xd7\xe8\x49\x8d\x9e\x0e\xea\x5a\xed\x6d\xbe\x55\xa9\xa1\x6b\x86\x8c\x8f\x2d\xf4\xac\x5f\x5c\x8f\x8a\x63\x7b\x7a\x4d\x27\x2b\x3b\x31\x4a\x7b\x71\xe3\x97\xdc\x4c\x5b\x67\x02\x09\x04\x3e\x23\x12\x58\x2c\x30\x99\xc6\xae\xf6\xc5\x39\xc8\x9b\x37\x18\xff\xe4\x21\x5d\x29\xa9\x83\xa4\x0e\xf2\xa3\x47\x64\x2f\x04\x4f\x0c\x3a\x9e\x58\xa1\xf3\x2a\x1c\xa7\xb0\x24\x61\x11\x45\x02\x97\x48\x63\x1f\xea\xd0\xbe\xed\x72\xa1\xad\xec\x0c\x1f\x0f\x2d\x4b\x99\x9f\xe6\x4f\xad\xa2\x7d\xdb\x12\x97\x56\x37\x8e\x1b\x89\x6c\xa4\xd3\xf1\xf8\x6f\xa4\x76\x64\x5d\x26\x33\xd7\xe0\x8e\x0e\xb2\x40\x14\x42\x43\x58\x2b\x0e\x8e\xd6\x4f\x5c\xd1\xe0\xd8\x50\x09\xc7\x99\x5d\x95\x43\x6f\x09\xd7\x3c\x5b\xd5\xed\x5b\xcd\xf1\x29\xcf\x75\xad\x74\x99\xd6\xe3\xf1\x3d\x66\x8e\x55\x47\x2d\x52\xad\x8e\xd8\x20\x25\x08\x6c\x4b\xc5\x72\xa7\xfc\x08\x9a\xb5\x79\xd6\xdb\x70\x24\xe7\x86\x28\xf7\x3d\x38\x18\x0e\xff\x43\x58\x4d\xd8\xae\xa0\x5b\x4f\x00\x24\x18\xb5\x4e\x65\xeb\xcb\xa3\x7f\x16\x48\x2c\x30\xeb\xb4\x86\x2a\x09\x49\xf8\x5f\x38\xc0\x3f\xc7\x22\xf1\x86\x7f\xac\xfc\xbc\x84\xfc\xd4\xce\xb1\xd3\x20\x71\x89\x71\x8f\x7d\x21\xff\x21\x09\x5e\x76\xdc\x4c\xfc\xf3\x1e\xce\x2c\x09\xa6\xe5\xfd\xdd\xff\x98\x92\x73\xfc\xdc\x7e\x77\x04\xa5\x8b\x1f\x82\x38\x9c\x93\xd7\x4b\x68\x5e\x74\xdd\x07\xc1\x50\x3f\xb9\x9b\x03\xd9\xf7\x40\xe3\x89\x87\xa4\xf9\xe0\x8b\x64\x4e\x9a\xe5\x4a\x92\x9d\xe3\xa2\x97\x63\xff\xba\x18\x66\x46\x67\x82\x23\x2f\x4a\x64\x99\x29\x35\x0f\x45\x9e\x5b\x37\xc3\xd9\x3c\xb0\x95\x7a\x1d\xc5\x71\xfc\x5d\x5b\x6b\xfd\x58\x74\xfc\x7d\xda\x7c\x0b\x9d\x4f\x83\xa7\xc1\xbf\x01\x00\x00\xff\xff\x99\x5e\xe2\xb9\x17\x0b\x00\x00"

func pseudorandomgeneratorCdcBytes() ([]byte, error) {
	return bindataRead(
		_pseudorandomgeneratorCdc,
		"PseudoRandomGenerator.cdc",
	)
}

func pseudorandomgeneratorCdc() (*asset, error) {
	bytes, err := pseudorandomgeneratorCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "PseudoRandomGenerator.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x48, 0x20, 0xee, 0x83, 0x3d, 0x17, 0x94, 0xd, 0xac, 0xfe, 0xf2, 0x52, 0xf5, 0x12, 0x93, 0x52, 0xd3, 0x52, 0xc1, 0x66, 0xa7, 0x53, 0x34, 0x7b, 0xb1, 0xc4, 0xc, 0x2a, 0xdf, 0xb0, 0x33, 0x69}}
	return a, nil
}

var _randombeaconhistoryCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x6d\x8f\xdb\xb8\x11\xfe\xbe\xbf\x62\x6e\x3f\x5c\xed\xc4\x2f\x97\xbb\xa2\x28\x8c\xf8\xd2\xbb\x00\xb9\x2c\x90\x5e\x17\xbb\x29\xfa\x61\xb1\xc0\x51\xd2\xc8\x62\x8f\x26\x55\x92\xb2\xe3\x06\xf9\xef\xc5\x90\x94\x4c\xca\xd4\x26\x29\x5a\x03\x9b\x58\x16\x39\xaf\xcf\x3c\x33\xe4\x7a\xbd\x86\x3b\x26\x2b\xb5\xff\x19\x59\xa9\xe4\x5b\x6e\xac\xd2\x27\x98\xbd\x79\x77\x73\x0b\x2f\xbe\xff\x61\x7e\xb5\x5e\xaf\xe9\x0f\xde\x37\xdc\x40\xa9\xa4\xd5\xac\xb4\x40\xcb\xd0\x80\x6d\x10\x9a\xb0\x47\xd5\xa0\x9d\x28\x30\xaa\xd3\x25\x1a\xd8\xa1\x44\xcd\x2c\x56\x50\x9c\xdc\xd2\x37\x42\x1d\x41\xa2\x3d\x2a\xfd\xfb\x0a\xde\x37\x08\x15\xd6\x5c\x62\x05\x6f\x91\x69\x5b\x20\xb3\xa0\xd1\x6f\x07\x6e\x9c\xde\xae\xad\x2e\x44\xdc\xa3\x3e\xf0\x12\xe1\xa7\xb2\x54\x9d\xb4\xc0\xac\x7b\x87\xb2\x22\x2b\xf0\x80\xfa\x04\x85\x50\xe5\xef\x70\xe4\xb6\x01\xdb\x30\xeb\x9f\xff\x60\x82\x71\x67\x6b\x25\x1a\xb3\x1a\xbc\xfc\x47\xc3\x05\x3a\x61\x61\xdd\x81\x89\x0e\x0d\x30\x8d\x60\x58\x8d\xe2\x74\xe9\x95\x0f\x20\xf8\x08\xc2\x4c\x2a\xb9\x6c\x35\x56\xbc\xb4\xac\x10\xb8\x80\x4e\x16\x9c\x19\xff\xfd\x80\x9a\xd7\x9c\xbe\xcf\x81\xc9\x0a\xac\x66\xd2\xec\xb9\x25\x71\x5c\x5a\xe5\xfd\xf8\x80\x65\x67\xb9\x92\xe0\x6c\x42\x79\xe0\x5a\xc9\x3d\x4a\x0b\x07\xce\xdc\x92\x52\xed\x69\x17\x97\x3b\x2f\x82\x95\xb4\x7e\x01\x9d\x71\x3f\x35\x08\x9a\x1d\x7b\xe3\x6b\xad\xf6\x60\x93\xfc\x55\x0a\x0d\x48\x65\x61\xd7\x31\xcd\xa4\x45\x04\xb2\x5b\x53\xec\x2c\x2f\x04\x3a\xcd\x51\x84\x5c\xb6\x28\x4b\x2e\x49\xdc\x90\xb5\x28\x2b\xac\xc0\x2a\x28\x10\x3a\xe3\x3c\x20\x0d\xff\xec\xa4\xb3\xc6\x07\x9f\x39\x49\xde\x5e\x27\x9f\x09\xd8\x63\xd9\x30\xc9\xcd\x9e\x36\xb7\x5a\x1d\x78\x85\xc0\x24\x28\x59\x36\x8c\xcb\x28\x47\xa9\x51\xa3\x94\xc1\x8d\xb3\x84\x09\xa3\x40\x23\xa9\x18\x2c\xea\x4c\x2e\x8b\xde\x20\x68\x0d\x76\x95\x5a\x06\xb4\xca\x6e\x5f\xa0\xa6\x50\xf7\xa9\x55\x1a\x66\xb7\x77\xbf\xfe\x32\x27\x49\x7d\xba\xc9\x3e\xa6\x0b\x6e\x35\xd3\xa7\xa5\x50\x72\x07\x06\xff\xd5\xa1\x8c\xc1\x14\x14\xad\x9c\x34\xfa\x7b\xa3\x34\x74\x86\xed\x46\x80\x83\x63\x83\x1a\x09\xeb\x9d\xb0\xc0\x0a\xa5\x5d\xc0\xb8\xcf\x09\xa3\x6f\xa6\xc3\x05\x70\xe7\x60\xe4\x1b\xc9\x8c\xdc\x7b\xcd\x2a\x67\x40\xd1\x71\x61\x97\x5c\x42\xdd\xc7\xfe\xb7\x73\xd4\x3c\x3e\x7f\x5b\xc0\xb1\xe1\x65\x33\x44\xac\x60\x94\x32\x0f\x32\x1f\x2b\x56\x8f\xc0\xec\xfc\xf0\x85\x71\x87\xac\x72\xab\xea\x4e\x08\x70\xf4\x40\x2e\x6c\xa0\xb1\xb6\x35\x9b\xf5\x7a\xc7\x6d\xd3\x15\xab\x52\xed\xd7\x4a\xd6\x42\x1d\xd7\xb5\xe0\xad\x59\xb7\x9d\x10\xeb\x17\xdf\xff\xe0\x24\xb1\xb2\x44\x63\x66\x4c\x88\xf9\x19\x8b\x39\x02\xfa\x78\x75\x05\x00\xe0\x89\x07\xa1\x41\xbe\x6b\x5c\x9d\x7b\x1f\x9c\x21\x5c\x1b\x9b\x2d\x67\x38\x32\x1f\x34\x4d\x11\x23\x39\x41\x6f\xaf\x72\x0e\x07\xa6\x41\xa8\x23\x1a\xfb\xd6\x89\xde\xc0\xdf\x6f\xa4\xfd\xd3\x1f\x5f\x0d\x6a\xef\x2f\x93\xdb\xf3\x5a\x2f\xba\x27\x80\x81\xbc\x16\x9e\x17\x2b\x60\xc6\xc3\x45\xb3\x13\xa8\x03\x6a\x60\xb0\x67\x6d\xeb\x6a\x93\xb0\x5a\x75\x25\xba\xb5\x6c\x87\x79\x03\x05\xda\xa0\xf6\xde\x69\x0d\x81\xd9\xc0\xc3\x03\x59\xfa\xe7\xc7\xc7\x34\x42\x2d\xb3\x0d\x99\x9a\xd8\x13\x91\xa9\x74\x6f\x2a\x6c\x85\x3a\x39\x26\x61\x9e\x3b\x63\xed\x2e\x2d\xa4\x78\x10\x70\xef\x4d\xbc\x65\xb6\xd9\x40\xf4\x10\x74\x3f\x83\xe5\x72\x79\x66\x05\x7a\x78\xb6\x0e\x66\x25\xd6\x65\x2c\x22\x57\x19\x97\x14\x12\x64\x65\xf3\x24\x3f\x93\xf9\x7d\xb1\xf5\x72\x2f\x0c\x1f\x24\x9f\x95\x05\x14\xf5\x96\xbc\x66\x42\x10\xf5\x52\xde\xd4\x51\xa2\x9e\x0e\xd8\x22\xdb\x68\x16\x21\xf5\xbe\xf1\x05\xe2\xaa\x52\x78\xc4\x1a\x13\xed\x7f\x69\x99\x66\xfb\x5c\x52\x5d\x88\x12\x21\x1e\x25\xa4\x2a\x2b\x2e\x76\xbb\xee\x24\x34\xbd\xfd\xb3\x3c\x64\x3c\x62\xe6\x71\x3c\xe8\x43\xa9\x2e\x3b\xad\x51\xda\x9f\x29\xfa\xbe\x14\x60\x0b\x3b\xb4\xaf\xa3\xdf\x67\xf3\x95\x2f\xc0\x64\x37\xaf\x73\x95\xbb\x8a\xab\x0a\xb6\x5b\x90\x5c\xc0\xc7\x64\x23\x7d\x3e\xbf\x33\x63\x59\x22\xe5\x53\xea\x4b\x4e\x60\x26\x18\x2b\xd6\xb6\x28\xab\x5c\x9c\xe6\x57\x67\xd1\x91\x82\x00\xf2\xbb\x4c\xda\xf2\x78\xbf\xc3\x56\xa3\x41\x69\x0d\xb0\x51\x56\x5d\x77\x80\x5a\x11\x1f\xec\xf8\x01\x65\x98\x52\xa2\xe8\xe6\x90\x6d\xac\xee\x06\x9e\xf4\x26\x44\x21\x1d\x17\x6f\x71\x0e\x58\xcf\x6a\x93\x6b\x9d\x41\x03\x40\xdc\xb2\x61\x2d\x97\xdc\xce\x32\xc2\x16\xa3\x5d\xf3\x51\x7a\x0d\x8a\x7a\x55\x24\x78\x2a\x26\x72\xe8\x96\xfa\xa0\x6c\xbd\xd4\xaf\xcd\xc1\x2d\xb5\xd6\x7c\x1e\x5e\x7b\x82\x31\x69\xdc\xc2\x24\x40\xfc\x4d\x44\x5d\x36\x5a\x49\x25\xd4\x8e\x97\x4c\x88\x93\x63\x45\x5d\x05\x9e\x66\xc6\xa8\x92\xfb\x51\xef\xbf\xcc\x53\x6c\xe6\x74\xca\x5a\xb6\xc3\xcf\xe6\xaa\x45\x7d\xfb\x25\xeb\xac\xb2\x4c\xbc\x43\xb9\x23\xce\xfe\x92\xfc\x9b\x0d\x3c\xc4\x36\xe7\x70\x10\x5b\xb8\x18\x9b\xb2\xc8\xe9\x5c\x4c\x08\xcf\xc2\x85\xc4\xc3\xd6\xc5\x21\xf3\xd2\x6b\xa3\xf7\xfe\xdb\xe5\x92\x48\x3f\x6c\x63\x6b\x26\xe0\x66\x7a\xbc\x99\x27\x01\xf7\xba\x1f\x51\xfe\x8a\xb6\x51\x95\x99\x40\xda\x2f\x68\x2d\x6a\x57\xd7\xd1\xcc\x99\x76\x30\x66\xb3\x35\xbf\x82\x5b\x26\x79\x69\x88\x4d\xdd\xd4\x4e\x5d\xce\x8c\x11\x07\xc8\x6d\x83\x7a\x50\xd8\x6a\x2c\xb1\x72\x30\x06\xfc\x50\x22\x86\x8e\x34\x0c\x26\xe1\x4c\xb6\x82\x5f\x95\x45\x7f\xfe\x61\x79\xbb\xc8\x68\xaf\x8a\xe6\x75\x21\xdc\x00\x5a\x60\x40\x8a\x3b\x09\xf4\x5a\x3b\x69\xb9\xe8\x17\x3f\x7f\xb1\x4a\xea\x20\xea\x70\x2c\xe9\x26\xd4\xdb\x12\x5f\xce\x43\x1c\xf5\x38\xab\x39\x1e\x70\x32\x6e\x97\x3a\x34\xda\x4e\x4b\x27\x76\x2a\xd0\x24\xec\x32\xd4\x34\x94\x25\x54\xe0\xcb\x75\xb2\x9a\xa9\xb1\x7a\x0d\x7f\xab\xef\x06\xf9\xb3\xc4\xbb\x1e\xec\xf3\xcd\x14\x3b\xb7\x1a\x73\x80\x4f\x7a\xdd\x37\xae\x4b\x6e\xe0\xba\x6f\x2c\x0d\xf3\x07\x81\x13\xd1\x39\xa2\x74\x35\xc8\x99\xe0\xff\xc6\xea\x3a\x11\x96\xc6\xfa\xc7\xed\xa5\xf4\x6f\x36\x70\x7d\x97\x47\xd5\x00\xa3\x31\x6e\x9e\xd2\xf1\x72\x72\x3a\xd8\xc0\xf5\x7d\x2e\x23\xbd\x27\xbd\x96\xeb\x51\xcd\x41\x18\x45\xb8\xac\xf0\x43\x1f\x51\xd8\x8e\xf4\x2e\x33\xae\x9d\x79\xcd\x18\xd4\x76\x96\xce\x27\x24\x8e\x42\xf2\x1d\x7c\xfb\x6d\x78\x7a\x19\xa4\xcf\x9c\xac\xdc\x7c\x20\x1c\x6d\xcc\x17\x89\xa8\x3d\x1a\xe3\xf8\xee\xfa\x56\xab\x42\xe0\x1e\x6a\x2e\x5d\x97\x48\xfb\x7b\x7f\x15\xe2\x94\x9d\xdd\x3c\x4f\x16\x01\xbc\x31\x56\xd2\x16\x9b\xf8\x3c\x74\xda\x29\x6b\x1f\x9c\xa2\xc7\x79\x42\x5d\x6e\x04\xf1\x65\x45\x13\x88\xa3\xd6\x70\x03\xf0\xc4\x65\xcd\x62\xaa\x25\x4e\x55\xb9\xef\x08\xfe\xe8\xb1\xc3\xfe\x14\x1d\xd5\xf4\x02\xbe\x5b\x3a\xfb\xc2\x19\x2c\xde\xdb\xf7\x0f\xda\x1e\x76\x5e\x1e\xb3\xac\x02\x2e\x4b\xd1\x55\x48\x1b\xce\xcd\x21\x47\x07\x3f\x4d\x76\xdd\xe8\x9c\x91\x1b\x04\xb8\x84\xb2\x51\x91\xc7\x3e\x0e\xc9\x20\x30\x68\xfb\xda\x81\xe0\xc0\xf1\xe8\x78\x64\x87\x76\xc2\xbe\xa7\x3b\xeb\x88\x57\xf2\xd3\xc4\xff\x91\x62\xd2\x02\xcd\x37\x74\xd8\xc2\xc3\x63\xb2\x2e\xed\xc6\x5f\x58\x71\xe7\x71\x9e\xce\xe6\xc6\x32\x6d\x6f\x5c\xcd\xfa\xb1\x00\x9e\x5d\x74\x7f\x5e\xc7\xcb\x7e\x4c\xd4\x8e\xe2\x11\x4b\xcb\x4d\x07\x9f\x12\xe5\x28\xab\x7e\x71\xb4\xf3\x79\xce\x80\x61\xe9\x53\xea\x23\x79\x4f\x2b\xf7\xa5\x4b\x78\xc6\x7d\x6b\x4f\xde\x71\x5e\xf7\x53\xc1\xd0\xeb\x05\x33\x36\x1d\x96\xd2\x58\x6c\xb7\x67\x9d\xa9\x29\x19\x02\xba\x04\x23\xfd\x1b\x41\x31\x7c\x19\x4d\x79\xd1\xc3\x79\xd4\xf3\xff\xc7\x27\xa9\xd8\xb7\x1b\xeb\x6f\xd2\xdc\x8d\x48\xcf\x44\x4c\x56\x54\xa3\x61\x76\x76\x1e\x67\xea\x74\x10\x43\xf3\x0a\x5f\x84\xf2\x73\xd7\x02\x13\xb0\x32\x82\x97\x38\x23\xe2\xdb\xc0\x8d\xb4\xb3\x73\x78\xe6\x0b\xe8\xda\xf7\xca\xff\xdc\xc7\x69\x3e\x9e\x4b\xc3\x4d\x5e\x38\x2f\x4e\x1c\x60\x03\x85\x5f\xbc\xa5\x4f\xc2\xeb\x97\xbd\x0b\x9e\xa7\xe0\x0a\x65\xc2\x47\xad\x27\x31\xe7\x89\x4e\x90\x97\xf5\x78\x21\x6b\x7e\x95\x7f\x8a\x32\xf5\x19\x8c\x24\x02\x22\xc0\xa4\xbf\x8f\xc1\x93\xbc\x9d\x04\x52\x26\x03\x9b\x31\x02\x2e\xba\xdd\x68\xfc\x9e\x18\x36\xbf\xf2\xc6\x70\x6a\xe6\xfc\xdf\x4a\x9f\x6a\x16\xef\x22\xa4\xcc\xe6\xc3\x4c\xf4\x71\x9c\xa3\x4b\xa2\x7f\xf5\x0a\x5a\x3a\x51\xcc\xbe\x8c\xe9\x93\x60\xba\x93\x5e\x5c\x07\x97\xe2\x5d\x1b\x49\xdf\xe7\x2e\xb4\x92\x96\xe0\x56\xe5\xae\x14\x61\x0b\xeb\x70\x09\xba\x7e\x23\xd4\x31\x73\x87\x33\x6c\xbb\x4a\xc5\x85\xdb\xcb\x95\x61\x07\x9c\xbd\x5c\x96\x1a\x89\x58\x86\xd5\xb3\x39\xb1\xd5\x66\x5a\x75\xef\xf7\xa7\xab\xff\x04\x00\x00\xff\xff\xb4\x54\x96\xb6\x03\x1b\x00\x00"

func randombeaconhistoryCdcBytes() ([]byte, error) {
	return bindataRead(
		_randombeaconhistoryCdc,
		"RandomBeaconHistory.cdc",
	)
}

func randombeaconhistoryCdc() (*asset, error) {
	bytes, err := randombeaconhistoryCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "RandomBeaconHistory.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x76, 0x13, 0x54, 0x40, 0x25, 0xfd, 0x8c, 0x3d, 0x10, 0xdf, 0x77, 0x30, 0x33, 0x85, 0xa8, 0xa2, 0xad, 0xf0, 0x2f, 0x56, 0xee, 0xa, 0x1a, 0x4b, 0x90, 0x9, 0xed, 0xb6, 0xbf, 0xe1, 0x2d, 0x17}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"CoinToss.cdc":              cointossCdc,
	"PseudoRandomGenerator.cdc": pseudorandomgeneratorCdc,
	"RandomBeaconHistory.cdc":   randombeaconhistoryCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"CoinToss.cdc": {cointossCdc, map[string]*bintree{}},
	"PseudoRandomGenerator.cdc": {pseudorandomgeneratorCdc, map[string]*bintree{}},
	"RandomBeaconHistory.cdc": {randombeaconhistoryCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
